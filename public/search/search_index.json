{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Development Notes","text":"<p>Notes to self. Things I tend to forget. Links to helpful resources. </p> <p>Work in progress. </p> <p>Me on .   </p>"},{"location":"apis/","title":"API's","text":""},{"location":"apis/#resources","title":"Resources","text":"<p>Discussion about  API tokens by fly.io.</p>"},{"location":"docker/","title":"Docker","text":""},{"location":"docker/#docker-run-options","title":"docker run options","text":""},{"location":"docker/#environment-variables","title":"Environment variables","text":"<p>Specify as many environment variables as you like with the <code>-e</code> option</p> <pre><code>docker run -e API_HOST=\"http://api:8000\" -e API_USERNAME=\"badman\" ...\n</code></pre>"},{"location":"docker/#volumes","title":"Volumes","text":"<p><pre><code>docker run -v /local/path:/docker/path --rm docker-image-name command\n</code></pre> If the command is an interactive processes (like a shell), you must use -i -t together in order to allocate a tty for the container process.</p>"},{"location":"docker/#logs","title":"Logs","text":"<p>Follow logs of a running docker instance</p> <pre><code>docker logs -f container-name\n</code></pre>"},{"location":"docker/#clean-up","title":"Clean up","text":"<p>Remove unused containers, networks, images etc</p> <pre><code>docker system prune\n</code></pre> <p> Official Docker system prune reference</p>"},{"location":"docker/#docker-compose","title":"docker-compose","text":"<p>Start a single service from a compose file, exposing the port 8000 that the webserver uses so it is accessible from the host.</p> <pre><code>docker-compose run --rm -p 8000:8000 --name web web python manage.py runserver 0.0.0.0:8000\n</code></pre>"},{"location":"docker/#resources","title":"Resources","text":"<p> J\u00e9r\u00f4me Petazzoni on docker build patterns</p>"},{"location":"fish/","title":"Fish","text":""},{"location":"fish/#history","title":"History","text":"<p>Get commands from current session in all terminals</p> <pre><code>history merge\n</code></pre> <p>Search for a specific period of time. The <code>t</code> flag is short for <code>--show-time</code> which by default uses the strftime format # %c%n. </p> <p>Example for all commands executed in mei:</p> <pre><code>history -t | grep -i -A1 mei\n</code></pre> <p>Example for all commands executed between 13 and 27 jan 2021, shown in reversed order:</p> <pre><code>history -t -R | grep -i -A1 -E \"[1-2][3-7] jan 2021\"\n</code></pre> <p>Fish configuration file</p> <pre><code>~/.config/fish/config.fish\n</code></pre> <p>To show a greeting upon startup for instance, add</p> <pre><code>set -g -x fish_greeting 'kau i ka nalu'\n</code></pre>"},{"location":"git/","title":"Git","text":""},{"location":"git/#alias","title":"Alias","text":"<p>Path to the global git config is</p> <pre><code>    ~/.gitconfig\n</code></pre> <pre><code>[alias]\n    co = checkout\n    br = branch\n    st = status\n</code></pre> <p>Or set an alias via the command line</p> <pre><code>    git config --global alias.co checkout\n</code></pre>"},{"location":"git/#resources","title":"Resources","text":"<p> git cheat sheet by Andrew J. Peterson.</p> <p> git tutorial by Oluwatobi.</p>"},{"location":"network/","title":"DNS","text":"<p>Resolve domain names, IPv4 and IPv6 addresses, DNS records, and services.</p> <pre><code>systemd-resolve --status\n</code></pre> <p>Show open ports and their processes</p> <pre><code>netstat -tulpen\n</code></pre>"},{"location":"network/#ubuntudebian-resolvconf","title":"Ubuntu/Debian resolv.conf","text":"<p>Add permanent DNS nameservers by extending resolv.conf.</p> <p>The resolv.conf file will be overwritten on each boot so you cannnot edit it directly. Instead, edit one of the two files that is used to create the resolv.conf file, the head or base file. If you want your additional entries to be written to the top of the <code>resolv.conf</code> file, edit the head file.</p> <pre><code>sudo vim /etc/resolvconf/resolv.conf.d/head\n</code></pre>"},{"location":"network/#wlan","title":"wlan","text":"<p>Get the name of the wlan you're connected to.</p> <pre><code>iwgetid -r\n</code></pre>"},{"location":"network/#ports","title":"Ports","text":"<p>Find listening ports on local machine</p> <pre><code>lsof -i -P -n | grep LISTEN\n</code></pre> Argument Description -i select IPv[46] files -P no port names -n no host names"},{"location":"py/","title":"Python","text":""},{"location":"py/#ipython","title":"ipython","text":"<pre><code>ipython profile create &lt;profile name&gt;\n</code></pre> <p>Usually gets created as <code>~/.ipython/profile_&lt;profile name&gt;/ipython_config.py</code></p>"},{"location":"py/#enabling-rich","title":"Enabling rich","text":"<p>Add the following to <code>~/.ipython/profile_rich_profile/ipython_config.py</code></p> <pre><code>## lines of code to run at IPython startup.\nc.InteractiveShellApp.exec_lines = [\n        'from rich import pretty, inspect',\n        'from rich import traceback',\n        'pretty.install()',\n        '_ = traceback.install()',\n]\n</code></pre>"},{"location":"py/#starting-with-a-specific-profile","title":"Starting with a specific profile","text":"<p>Make ipython an fish alias</p> <pre><code>ipython is a function with definition\n# Defined in ~/.config/fish/functions/ipython.fish @ line 1\nfunction ipython\n    command ipython --profile=rich_profile $argv;\nend\n</code></pre>"},{"location":"py/#resources","title":"Resources","text":""},{"location":"py/#subclassing","title":"subclassing","text":"<p>Blog post by  Hynek Schlawack.</p>"},{"location":"py/#type-hints","title":"type hints","text":"<p>Blog post by  Adam Johnson  on how to use the overload decorator.</p>"},{"location":"shell/","title":"Shell","text":""},{"location":"shell/#which-vs-type","title":"<code>which</code> vs <code>type</code>","text":""},{"location":"shell/#which","title":"which","text":"<ul> <li>finds executable in your <code>$PATH</code></li> <li>lives in /usr/bin/which</li> </ul>"},{"location":"shell/#type","title":"type","text":"<ul> <li>if used with the <code>-a</code> flag (\"all\"), it determines if the command is an alias, function, built-in command, cached executable (hashed) or binary in <code>$PATH</code>, etc</li> <li>shell builtin</li> </ul> <p>Example output when used with the <code>-a</code> flag</p> <p></p> <p>Other command options are: </p> <ul> <li><code>-t</code> single word output for the type, e.g. alias, buildin, function etc</li> <li><code>-p</code> path to the disk file</li> </ul>"},{"location":"shell/#users","title":"Users","text":"<p>Find user name belonging to user ID</p> <pre><code>id -un &lt;ID&gt;\n</code></pre>"},{"location":"shell/#ssh","title":"ssh","text":"<p>Connect to remote host via ssh with public key authentication. If no public/private key pair exists yet run first.</p> <pre><code>ssh-keygen\n</code></pre> <p>Then copy the public key to the remote machine</p> <pre><code>ssh-copy-id &lt;login user name&gt;@&lt;remote host name&gt;\n</code></pre>"},{"location":"shell/#alias","title":"alias","text":"<p>Add to <code>/home/&lt;user&gt;/.ssh/config</code></p> <pre><code>Host &lt;your alias&gt;\n    HostName &lt;full remote host name&gt;\n    User &lt;login user name&gt;\n</code></pre> <p>In combination with public key authentication you can now login to the remote machine without being prompted for a password with</p> <pre><code>ssh &lt;your alias&gt;\n</code></pre>"},{"location":"shell/#control-path-and-master","title":"control path and master","text":"<p>Re-use an existing connection to server you already have logged into.</p> <p>To enable for all hosts add the following to <code>/home/&lt;user&gt;/.ssh/config</code></p> <pre><code>host *\n    controlmaster auto\n    controlpath ~/.ssh/control-%h-%p-%r\n</code></pre> <p>This will put the shared sockets in the ~/.ssh directory. </p> <ul> <li>%h - Host</li> <li>%p - Port</li> <li>%r - Remote login username</li> </ul> <p>Host, port and login username substitutions ensure unique shared connections.</p>"},{"location":"shell/#resources","title":"Resources","text":"<p> ssh.com</p>"},{"location":"shell/#dig","title":"dig","text":"<p>Short for Get Domain Details.</p> <p>Possible types</p> Query type Output Function A IPv4 address record Returns an IPv4 address. AAAA IPv6 address record Returns an IPv6 address. SOA A zone of authority record Returns authoritative information about a DNS zone. CNAME Canonical name record Returns an alias for the target domain and all subsequent aliases. MX Mail exchange record   Returns a list of message transfer agents assigned to the target domain. PTR Pointer record Returns a canonical name. Most commonly used for reverse DNS look-ups. NS Name server record Returns an authoritative name server for the target domain."},{"location":"shell/#resources_1","title":"Resources","text":"<p> Julia Evans on how to use dig</p> <p> Example on how to solve DNS issues</p>"},{"location":"shell/#find","title":"find","text":"<p>General form </p> <pre><code>  find (starting directory) (matching criteria and actions)\n</code></pre> <p>To find all files under the current directory of type <code>plain text</code> with the file extension <code>.ts</code> </p> <pre><code>  find . -type f -name \"*.ts\"\n</code></pre>"},{"location":"shell/#option-type","title":"Option <code>type</code>","text":"Option Description f plain text d directory"},{"location":"shell/#option-mtime","title":"Option <code>mtime</code>","text":"<p>The file was modified x days ago. You can use <code>+</code> and <code>-</code> operators to narrow down your search. </p> <p>Find csv files last modified more than 5 days ago</p> <pre><code>  find . -type f -mtime +5 \"*.csv\" \n</code></pre> <p>Find csv files last modified last week</p> <pre><code>  find . -type f -mtime -7 \"*.csv\" \n</code></pre>"},{"location":"shell/#action-exec","title":"Action <code>exec</code>","text":"<p>You can execute a command that will be applied to all found files, like removing them. </p> <p>don't forget the backslash semicolon!</p> <p>Commands you want to execute must end with <code>\\;</code></p> <pre><code>  find . -type f -name \"*.ts\" -exec rm -rf {} \\;\n</code></pre>"},{"location":"shell/#action-ok","title":"Action <code>ok</code>","text":"<p>If you want to confirm the action before the command will be applied use <code>-ok</code> instead of <code>-exec</code></p> <pre><code>  find . -type f -name \"*.ts\" -ok rm -rf {} \\;\n</code></pre> <p>This will prompt before actually executing the command</p> <p></p> <p>Use <code>y</code> or <code>yes</code> to confirm, <code>n</code> or <code>no</code> to abort. </p>"},{"location":"ubuntu/","title":"Ubuntu","text":""},{"location":"ubuntu/#apt","title":"apt","text":"<p>Upgrade a single package, e.g. fish</p> <pre><code>apt --only-upgrade install fish\n</code></pre>"},{"location":"ubuntu/#terminator","title":"terminator","text":"<pre><code>add-apt-repository ppa:mattrose/terminator\napt-get update\napt install terminator\n</code></pre>"}]}
